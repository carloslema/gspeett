#! /usr/bin/env python2.6
# -*- coding: utf-8 -*-

import logging

logger = logging.getLogger('gspeett')
logger.setLevel(logging.INFO)

## Configure logger
log_handler = logging.StreamHandler()
formatter = logging.Formatter("%(message)s")
# add formatter to log_handler
log_handler.setFormatter(formatter)
# add log_handler to logger
logger.addHandler(log_handler)
### end of logger configuration

import getopt
import sys

from gspeett import gspeett

def usage():
    print """The LAAS-CNRS 'gSpett' module (v.""" + gspeett.GSPEETT_VERSION + """).

Usage:
gspeett [OPTIONS]
  -h, --help			Displays this message and exits
  -v, --version			Returns gSpeett version
  -d, --debug			Sets verbosity to debug
  -f, --flac=			Specifies a FLAC 16kHZ encoded file to convert
  -m, --micro			Records from the microphone (default)
  --duration=			Recording duration, in seconds
             			(only with microphone, default: auto)
  --continuous			Records and recognizes in loop
  -l, --lang=			Sets the input speech language (default: en-US)

Under default operation, this module records 6 seconds of voice from the system
microphone, and submits it to the Google Speech Recognition service.

The result of the conversion is output on stdout.

Options details:
  -d: prints some debug informations.
  -f: allows to pass a FLAC file instead of recording from the microphone
  --duration: when using the microphone, specifies the length of the recording
              in seconds. If not set, gSpeett will automatically try to detect
              the end of the speech.
  -l: specify the input language (IETF language code. E.g.: fr-FR, de, en-US...)
"""


try:
    optlist, args = getopt.getopt(sys.argv[1:], 'hvdf:ml:', ['help', 'version', 'debug', 'flac=', 'micro', 'duration=', 'continuous', 'lang='])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

duration = 0
input_lang = "en-US"
flac_path = None
loop = False

for o, a in optlist:
    if o in ("-h", "--help"):
        usage()
        sys.exit(0)
    elif o in ("-v", "--version"):
        print("gSpeett " + gspeett.GSPEETT_VERSION)
        sys.exit(0)
    elif o in ("-d", "--debug"):
        logger.setLevel(logging.DEBUG)
    elif o in ("-f", "--flac"):
        flac_path = a
    elif o in ("-l", "--lang"):
        input_lang = a
    elif o in ("--duration"):
        duration = int(a)
    elif o in ("--continuous"):
        loop = True
    else:
        print "Unhandled option " + o
        usage()
        sys.exit(2)

t = None

reco = gspeett.GoogleVoiceRecognition(input_lang)

while True:
    res = None
    if flac_path:
        res = reco.flac(flac_path)
    else:
        res = reco.mic(duration)

    if logger.isEnabledFor(logging.DEBUG):
        for s in res:
            logger.debug("Got \"" + s + "\" in " + input_lang)
    else:
        if res:
            sys.stdout.write(res[0] + "\n")
            sys.stdout.flush()

    if not loop:
        break
    else:
        logger.info("Starting over. Speak now.")

