#! /usr/bin/env python2.6
# -*- coding: utf-8 -*-

import logging

logger = logging.getLogger('gspeett')
logger.setLevel(logging.INFO)

log_handler = logging.StreamHandler()
formatter = logging.Formatter("%(message)s")
log_handler.setFormatter(formatter)
logger.addHandler(log_handler)

import sys
import argparse

from gspeett import gspeett

def version():
    print("gSpeett %s" % gspeett.GSPEETT_VERSION)



parser = argparse.ArgumentParser(description='Python bindings for Google speech recognition service',               epilog="""Under default operation, this module records 6 seconds of voice from the system microphone, and submits it to the Google Speech Recognition service.

The result of the conversion is output on stdout.
""")
parser.add_argument('-v', '--version', action='version',
                    version=version(), help='returns gSpeett version')
parser.add_argument('-q', '--quiet', action='store_true',
                            help='be quiet (only errors are reported)')
parser.add_argument('-d', '--debug', action='store_true',
                            help='enables verbose output')
parser.add_argument('-f', '--flac', default="", nargs='?',
                            help='specifies a FLAC 16kHZ encoded file to convert. If not specified, record from microphone')
parser.add_argument('--duration', default=6, type=int,
                                help='recording duration, in seconds (when using mic). If not set, detect silence to stop recording.')
parser.add_argument('--continuous', action='store_true',
                            help='records and recognizes in loop')
parser.add_argument('-l', '--lang', default="en-US", nargs='?', help="sets the input speech language (default: en-US)")

args = parser.parse_args()

duration = args.duration
input_lang = args.lang
flac_path = args.flac
loop = args.continuous

if args.debug:
    logger.setLevel(logging.DEBUG)
elif args.quiet:
    logger.setLevel(logging.ERROR)
else:
    logger.setLevel(logging.INFO)

t = None

reco = gspeett.GoogleVoiceRecognition(input_lang)

while True:
    res = None
    if flac_path:
        res = reco.flac(flac_path)
    else:
        res = reco.mic(duration)

    if logger.isEnabledFor(logging.DEBUG):
        for s in res:
            logger.debug("Got \"" + s + "\" in " + input_lang)
    else:
        if res:
            sys.stdout.write(res[0] + "\n")
            sys.stdout.flush()

    if not loop:
        break
    else:
        logger.info("Starting over. Speak now.")

