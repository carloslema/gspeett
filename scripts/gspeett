#! /usr/bin/env python2.6
# -*- coding: utf-8 -*-

import getopt
import sys

from gspeett import gspeett
import logging

GOOGLE_API_KEY= "AIzaSyCjUiaoRKX7BZ6twcQj0yW1Y6ElstWeELA"

logger = logging.getLogger('gspeett')
logger.setLevel(logging.WARNING)


def usage():
    print """The LAAS-CNRS 'gSpett' module (v.""" + gspeett.GSPEETT_VERSION + """).

Usage:
gspeett [OPTIONS]
  -h, --help			Displays this message and exits
  -v, --version			Returns gSpeett version
  -d, --debug			Sets verbosity to debug
  -f, --flac=			Specifies a FLAC 16kHZ encoded file to convert
  -m, --micro			Records from the microphone (default)
  --duration=			Recording duration, in seconds
             			(only with microphone, default: 2)
  -l, --lang=			Sets the input speech language (default: en-US)
  --output-lang=		Sets the text output language (default: en-US)

Under default operation, this module records 2 seconds of voice from the system
microphone, and submits it to the Google Speech Recognition service.

The result of the conversion is output on stdout.

Options details:
  -d: prints some debug informations.
  -f: allows to pass a FLAC file instead of recording from the microphone
  -l: specify the input language (IETF language code. E.g.: fr-FR, de, en-US...)
  --output-lang: if different from the input language, attempts to translate
      the output using Google translate.
"""


try:
    optlist, args = getopt.getopt(sys.argv[1:], 'hvdf:ml:', ['help', 'version', 'debug', 'flac=', 'micro', 'duration=', 'demo', 'lang=', 'output-lang='])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

duration = 2
input_lang = "en-US"
output_lang = "en-US"
flac_path = None

for o, a in optlist:
    if o in ("-h", "--help"):
        usage()
        sys.exit(0)
    elif o in ("-v", "--version"):
        print("gSpeett " + gspeett.GSPEETT_VERSION)
        sys.exit(0)
    elif o in ("-d", "--debug"):
        logger.setLevel(logging.DEBUG)
    elif o in ("-f", "--flac"):
        flac_path = a
    elif o in ("-l", "--lang"):
        input_lang = a
    elif o in ("--duration"):
        duration = int(a)
    elif o in ("--output-lang"):
        output_lang = a
    else:
        print "Unhandled option " + o
        usage()
        sys.exit(2)

## Configure logger
log_handler = logging.StreamHandler()
formatter = logging.Formatter("%(message)s")
# add formatter to log_handler
log_handler.setFormatter(formatter)
# add log_handler to logger
logger.addHandler(log_handler)
### end of logger configuration

t = None
need_translation = False

if input_lang != output_lang:
    need_translation = True
    logger.debug("Translation from " + input_lang + " to " + output_lang + " required.")
    t = gspeett.GoogleTranslator(GOOGLE_API_KEY, to=output_lang)

reco = gspeett.GoogleVoiceRecognition(input_lang)

res = None
if flac_path:
    res = reco.flac(flac_path)
else:
    res = reco.mic(duration)

if logger.isEnabledFor(logging.DEBUG):
    for s in res:
        logger.debug("Got \"" + s + "\" in " + input_lang)
        if need_translation:
            logger.debug("-> \"" + t.translate(s) + "\" in " + output_lang)
else:
    if res:
        if need_translation:
            print(t.translate(res[0]))
        else:
            print(res[0])

